name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # Will trigger on tags like v1.0.0, v2.1.3, etc.

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - uses: actions/checkout@v3
      
      # Extract version from tag
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Set up CMake
        uses: lukka/get-cmake@latest
        
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.0'
          
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
          
      # macOS specific steps
      - name: Sign macOS Application
        if: matrix.os == 'macos-latest'
        env:
          APPLE_SIGNING_ID: ${{ vars.APPLE_SIGNING_ID }}
        run: |
          /usr/bin/codesign --force --options runtime --sign "Developer ID Application: ${{ vars.APPLE_SIGNING_ID }}" --verbose "${{github.workspace}}/build/Owon1041.app"
      
      - name: Notarize macOS Application
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          # Create a ZIP archive of the app
          ditto -c -k --keepParent "${{github.workspace}}/build/Owon1041.app" "${{github.workspace}}/build/Owon1041.zip"
          
          # Notarize the app
          xcrun notarytool submit "${{github.workspace}}/build/Owon1041.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "${{ vars.APPLE_TEAM_ID }}" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "${{github.workspace}}/build/Owon1041.app"
      
      - name: Create macOS package
        if: matrix.os == 'macos-latest'
        run: |
          # Create a DMG
          hdiutil create -volname "Owon1041" -srcfolder "${{github.workspace}}/build/Owon1041.app" -ov -format UDZO "${{github.workspace}}/build/Owon1041-${{ steps.get_version.outputs.VERSION }}.dmg"
      
      # Windows specific steps
      - name: Create Windows installer
        if: matrix.os == 'windows-latest'
        run: |
          # Package as ZIP for Windows
          7z a -tzip "${{github.workspace}}/build/Owon1041-${{ steps.get_version.outputs.VERSION }}-Windows.zip" "${{github.workspace}}/build/Release/Owon1041.exe"
      
      # Linux specific steps
      - name: Create Linux package
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Package as tar.gz
          tar -czvf "${{github.workspace}}/build/Owon1041-${{ steps.get_version.outputs.VERSION }}-Linux.tar.gz" -C "${{github.workspace}}/build" Owon1041
      
      # Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Owon1041-${{ matrix.os }}
          path: |
            ${{ matrix.os == 'macos-latest' && github.workspace }}/build/*.dmg
            ${{ matrix.os == 'windows-latest' && github.workspace }}/build/*.zip
            ${{ matrix.os == 'ubuntu-latest' && github.workspace }}/build/*.tar.gz
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Extract version from tag
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          
      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
          
      # Create release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Owon1041 v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/Owon1041-macos-latest/*.dmg
            artifacts/Owon1041-windows-latest/*.zip
            artifacts/Owon1041-ubuntu-latest/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}